{"ast":null,"code":"var _jsxFileName = \"/Users/sagarwagh/Desktop/Final Project/hospital-management-system/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport PatientDashboard from './PatientDashboard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [appointments, setAppointments] = useState([]);\n\n  // Fetch the appointments data from the backend when the component mounts\n  useEffect(() => {\n    const fetchAppointments = async () => {\n      try {\n        const response = await fetch('http://127.0.0.1:5000/appointments');\n        if (!response.ok) {\n          throw new Error('Failed to fetch appointments');\n        }\n        const data = await response.json();\n        setAppointments(data); // Save the fetched appointments in state\n      } catch (error) {\n        console.error('Error fetching appointments:', error);\n      }\n    };\n    fetchAppointments();\n  }, []); // Empty array means this effect runs once when the component mounts\n\n  // Function to handle canceling an appointment\n  const handleCancelAppointment = async id => {\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/appointments/${id}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        throw new Error('Failed to cancel appointment');\n      }\n\n      // Update the appointments locally by filtering out the canceled appointment\n      setAppointments(prevAppointments => prevAppointments.filter(appt => appt.id !== id));\n    } catch (error) {\n      console.error('Error canceling appointment:', error);\n    }\n  };\n\n  // Function to handle submitting a new note for an appointment\n  const handleSubmitNote = async (id, note) => {\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/appointments/${id}/notes`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          note\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to submit note');\n      }\n      const updatedAppointment = await response.json();\n\n      // Update the appointment locally with the new note\n      setAppointments(prevAppointments => prevAppointments.map(appt => appt.id === id ? updatedAppointment : appt));\n    } catch (error) {\n      console.error('Error submitting note:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Hospital Management System\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PatientDashboard, {\n      appointments: appointments,\n      onCancel: handleCancelAppointment,\n      onSubmitNote: handleSubmitNote,\n      onBookAppointment: newAppointment => setAppointments([...appointments, newAppointment]) // Book new appointment handler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"MfWojYlbX9MgZ4Hbt1nSvX/pcQY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","PatientDashboard","jsxDEV","_jsxDEV","App","_s","appointments","setAppointments","fetchAppointments","response","fetch","ok","Error","data","json","error","console","handleCancelAppointment","id","method","prevAppointments","filter","appt","handleSubmitNote","note","headers","body","JSON","stringify","updatedAppointment","map","children","fileName","_jsxFileName","lineNumber","columnNumber","onCancel","onSubmitNote","onBookAppointment","newAppointment","_c","$RefreshReg$"],"sources":["/Users/sagarwagh/Desktop/Final Project/hospital-management-system/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PatientDashboard from './PatientDashboard';\n\nconst App = () => {\n    const [appointments, setAppointments] = useState([]);\n\n    // Fetch the appointments data from the backend when the component mounts\n    useEffect(() => {\n        const fetchAppointments = async () => {\n            try {\n                const response = await fetch('http://127.0.0.1:5000/appointments');\n                if (!response.ok) {\n                    throw new Error('Failed to fetch appointments');\n                }\n                const data = await response.json();\n                setAppointments(data);  // Save the fetched appointments in state\n            } catch (error) {\n                console.error('Error fetching appointments:', error);\n            }\n        };\n\n        fetchAppointments();\n    }, []);  // Empty array means this effect runs once when the component mounts\n\n    // Function to handle canceling an appointment\n    const handleCancelAppointment = async (id) => {\n        try {\n            const response = await fetch(`http://127.0.0.1:5000/appointments/${id}`, {\n                method: 'DELETE',\n            });\n\n            if (!response.ok) {\n                throw new Error('Failed to cancel appointment');\n            }\n\n            // Update the appointments locally by filtering out the canceled appointment\n            setAppointments(prevAppointments => prevAppointments.filter(appt => appt.id !== id));\n        } catch (error) {\n            console.error('Error canceling appointment:', error);\n        }\n    };\n\n    // Function to handle submitting a new note for an appointment\n    const handleSubmitNote = async (id, note) => {\n        try {\n            const response = await fetch(`http://127.0.0.1:5000/appointments/${id}/notes`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ note }),\n            });\n\n            if (!response.ok) {\n                throw new Error('Failed to submit note');\n            }\n\n            const updatedAppointment = await response.json();\n\n            // Update the appointment locally with the new note\n            setAppointments(prevAppointments =>\n                prevAppointments.map(appt =>\n                    appt.id === id ? updatedAppointment : appt\n                )\n            );\n        } catch (error) {\n            console.error('Error submitting note:', error);\n        }\n    };\n\n    return (\n        <div>\n            <h1>Hospital Management System</h1>\n            {/* Pass fetched appointments and handlers to the PatientDashboard */}\n            <PatientDashboard\n                appointments={appointments}\n                onCancel={handleCancelAppointment}\n                onSubmitNote={handleSubmitNote}\n                onBookAppointment={(newAppointment) => setAppointments([...appointments, newAppointment])} // Book new appointment handler\n            />\n        </div>\n    );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,gBAAgB,MAAM,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACd,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;;EAEpD;EACAD,SAAS,CAAC,MAAM;IACZ,MAAMS,iBAAiB,GAAG,MAAAA,CAAA,KAAY;MAClC,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,CAAC;QAClE,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;UACd,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;QACnD;QACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClCP,eAAe,CAACM,IAAI,CAAC,CAAC,CAAE;MAC5B,CAAC,CAAC,OAAOE,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACxD;IACJ,CAAC;IAEDP,iBAAiB,CAAC,CAAC;EACvB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAE;;EAET;EACA,MAAMS,uBAAuB,GAAG,MAAOC,EAAE,IAAK;IAC1C,IAAI;MACA,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAC,sCAAsCQ,EAAE,EAAE,EAAE;QACrEC,MAAM,EAAE;MACZ,CAAC,CAAC;MAEF,IAAI,CAACV,QAAQ,CAACE,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;MACnD;;MAEA;MACAL,eAAe,CAACa,gBAAgB,IAAIA,gBAAgB,CAACC,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACJ,EAAE,KAAKA,EAAE,CAAC,CAAC;IACxF,CAAC,CAAC,OAAOH,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACxD;EACJ,CAAC;;EAED;EACA,MAAMQ,gBAAgB,GAAG,MAAAA,CAAOL,EAAE,EAAEM,IAAI,KAAK;IACzC,IAAI;MACA,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAC,sCAAsCQ,EAAE,QAAQ,EAAE;QAC3EC,MAAM,EAAE,MAAM;QACdM,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEJ;QAAK,CAAC;MACjC,CAAC,CAAC;MAEF,IAAI,CAACf,QAAQ,CAACE,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;MAC5C;MAEA,MAAMiB,kBAAkB,GAAG,MAAMpB,QAAQ,CAACK,IAAI,CAAC,CAAC;;MAEhD;MACAP,eAAe,CAACa,gBAAgB,IAC5BA,gBAAgB,CAACU,GAAG,CAACR,IAAI,IACrBA,IAAI,CAACJ,EAAE,KAAKA,EAAE,GAAGW,kBAAkB,GAAGP,IAC1C,CACJ,CAAC;IACL,CAAC,CAAC,OAAOP,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAClD;EACJ,CAAC;EAED,oBACIZ,OAAA;IAAA4B,QAAA,gBACI5B,OAAA;MAAA4B,QAAA,EAAI;IAA0B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAEnChC,OAAA,CAACF,gBAAgB;MACbK,YAAY,EAAEA,YAAa;MAC3B8B,QAAQ,EAAEnB,uBAAwB;MAClCoB,YAAY,EAAEd,gBAAiB;MAC/Be,iBAAiB,EAAGC,cAAc,IAAKhC,eAAe,CAAC,CAAC,GAAGD,YAAY,EAAEiC,cAAc,CAAC,CAAE,CAAC;IAAA;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9F,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAAC9B,EAAA,CA/EID,GAAG;AAAAoC,EAAA,GAAHpC,GAAG;AAiFT,eAAeA,GAAG;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}