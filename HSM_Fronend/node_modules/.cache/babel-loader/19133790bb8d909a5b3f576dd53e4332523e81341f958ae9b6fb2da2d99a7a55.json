{"ast":null,"code":"var _jsxFileName = \"/Users/sagarwagh/Desktop/Final Project/hospital-management-system/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport DoctorDashboard from './components/DoctorDashboard';\nimport PatientDashboard from './components/PatientDashboard';\nimport LoginPage from './components/LoginPage';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [appointments, setAppointments] = useState([]);\n  const [userType, setUserType] = useState(null);\n  useEffect(() => {\n    // Check if user is logged in\n    const storedUserType = localStorage.getItem('userType');\n    if (storedUserType) {\n      setUserType(storedUserType);\n    }\n\n    // Fetch appointments on initial load\n    const fetchAppointments = async () => {\n      try {\n        const token = localStorage.getItem('token'); // Get token from local storage\n        const response = await fetch('http://127.0.0.1:5000/appointments', {\n          headers: {\n            'Authorization': `Bearer ${token}` // Add token to the request headers\n          }\n        });\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        setAppointments(data);\n      } catch (error) {\n        console.error('Error fetching appointments:', error);\n      }\n    };\n    fetchAppointments();\n  }, []);\n  const handleLogin = async (username, password, userType) => {\n    try {\n      const response = await axios.post('http://127.0.0.1:5000/login', {\n        username,\n        password,\n        user_type: userType\n      });\n      const {\n        access_token\n      } = response.data;\n\n      // Store token and user type in local storage\n      localStorage.setItem('token', access_token);\n      localStorage.setItem('userType', userType);\n      setUserType(userType);\n    } catch (error) {\n      console.error('Error during login:', error);\n    }\n  };\n  const handleLogout = () => {\n    localStorage.removeItem('username');\n    localStorage.removeItem('userType');\n    localStorage.removeItem('token'); // Remove token from local storage\n    setUserType(null); // Reset user type\n  };\n  const handleCancelAppointment = async id => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`http://127.0.0.1:5000/appointments/${id}/cancel`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}` // Add token to the request headers\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to cancel appointment');\n      }\n      const data = await response.json();\n      if (data.success) {\n        setAppointments(appointments.map(appointment => appointment.id === id ? {\n          ...appointment,\n          status: 'Cancelled'\n        } : appointment));\n      } else {\n        console.error('Error cancelling appointment:', data.message);\n      }\n    } catch (error) {\n      console.error('Error cancelling appointment:', error);\n    }\n  };\n  const handleSubmitNote = async (id, newNote) => {\n    const author = userType === 'doctor' ? 'Doctor' : 'Patient'; // Determine the author based on user type\n    try {\n      const token = localStorage.getItem('token');\n      await axios.post(`http://127.0.0.1:5000/appointments/${id}/add-note`, {\n        note: newNote.text,\n        author: author\n      }, {\n        headers: {\n          'Authorization': `Bearer ${token}` // Add token to the request headers\n        }\n      });\n\n      // Update the appointments state with the new note\n      setAppointments(prevAppointments => prevAppointments.map(appointment => appointment.id === id ? {\n        ...appointment,\n        notes: [...appointment.notes, {\n          author: author,\n          text: newNote.text\n        }]\n      } : appointment));\n      return true;\n    } catch (error) {\n      console.error('Error submitting note:', error);\n      return false;\n    }\n  };\n  const handleBookAppointment = newAppointment => {\n    const newId = appointments.length + 1;\n    setAppointments([...appointments, {\n      id: newId,\n      doctor_name: 'Dr. Jane Smith',\n      patient_name: localStorage.getItem('username'),\n      // Use stored username\n      date: newAppointment.date,\n      status: 'Scheduled',\n      notes: [{\n        author: 'Patient',\n        text: newAppointment.note\n      }],\n      isDoctor: false\n    }]);\n  };\n  if (!userType) {\n    return /*#__PURE__*/_jsxDEV(LoginPage, {\n      onLogin: handleLogin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 16\n    }, this);\n  }\n  const filteredAppointments = userType === 'patient' ? appointments.filter(appointment => appointment.patient_name === localStorage.getItem('username')) : appointments;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Hospital Management System\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLogout,\n      children: \"Logout\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }, this), userType === 'doctor' ? /*#__PURE__*/_jsxDEV(DoctorDashboard, {\n      appointments: filteredAppointments,\n      onCancel: handleCancelAppointment,\n      onSubmitNote: handleSubmitNote\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(PatientDashboard, {\n      appointments: filteredAppointments,\n      onCancel: handleCancelAppointment,\n      onSubmitNote: handleSubmitNote,\n      onBookAppointment: handleBookAppointment\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"zQcYWi9pEHSP7I9Oj7ANVEoB9S4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","DoctorDashboard","PatientDashboard","LoginPage","axios","jsxDEV","_jsxDEV","App","_s","appointments","setAppointments","userType","setUserType","storedUserType","localStorage","getItem","fetchAppointments","token","response","fetch","headers","ok","Error","data","json","error","console","handleLogin","username","password","post","user_type","access_token","setItem","handleLogout","removeItem","handleCancelAppointment","id","method","success","map","appointment","status","message","handleSubmitNote","newNote","author","note","text","prevAppointments","notes","handleBookAppointment","newAppointment","newId","length","doctor_name","patient_name","date","isDoctor","onLogin","fileName","_jsxFileName","lineNumber","columnNumber","filteredAppointments","filter","className","children","onClick","onCancel","onSubmitNote","onBookAppointment","_c","$RefreshReg$"],"sources":["/Users/sagarwagh/Desktop/Final Project/hospital-management-system/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport DoctorDashboard from './components/DoctorDashboard';\nimport PatientDashboard from './components/PatientDashboard';\nimport LoginPage from './components/LoginPage';\nimport axios from 'axios';\n\nconst App = () => {\n    const [appointments, setAppointments] = useState([]);\n    const [userType, setUserType] = useState(null);\n\n    useEffect(() => {\n        // Check if user is logged in\n        const storedUserType = localStorage.getItem('userType');\n        if (storedUserType) {\n            setUserType(storedUserType);\n        }\n\n        // Fetch appointments on initial load\n        const fetchAppointments = async () => {\n            try {\n                const token = localStorage.getItem('token'); // Get token from local storage\n                const response = await fetch('http://127.0.0.1:5000/appointments', {\n                    headers: {\n                        'Authorization': `Bearer ${token}` // Add token to the request headers\n                    }\n                });\n                if (!response.ok) {\n                    throw new Error('Network response was not ok');\n                }\n                const data = await response.json();\n                setAppointments(data);\n            } catch (error) {\n                console.error('Error fetching appointments:', error);\n            }\n        };\n\n        fetchAppointments();\n    }, []);\n\n    const handleLogin = async (username, password, userType) => {\n        try {\n            const response = await axios.post('http://127.0.0.1:5000/login', { username, password, user_type: userType });\n            const { access_token } = response.data;\n\n            // Store token and user type in local storage\n            localStorage.setItem('token', access_token);\n            localStorage.setItem('userType', userType);\n            setUserType(userType);\n        } catch (error) {\n            console.error('Error during login:', error);\n        }\n    };\n\n    const handleLogout = () => {\n        localStorage.removeItem('username');\n        localStorage.removeItem('userType');\n        localStorage.removeItem('token'); // Remove token from local storage\n        setUserType(null); // Reset user type\n    };\n\n    const handleCancelAppointment = async (id) => {\n        try {\n            const token = localStorage.getItem('token');\n            const response = await fetch(`http://127.0.0.1:5000/appointments/${id}/cancel`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${token}` // Add token to the request headers\n                },\n            });\n\n            if (!response.ok) {\n                throw new Error('Failed to cancel appointment');\n            }\n\n            const data = await response.json();\n\n            if (data.success) {\n                setAppointments(\n                    appointments.map((appointment) =>\n                        appointment.id === id ? { ...appointment, status: 'Cancelled' } : appointment\n                    )\n                );\n            } else {\n                console.error('Error cancelling appointment:', data.message);\n            }\n        } catch (error) {\n            console.error('Error cancelling appointment:', error);\n        }\n    };\n\n    const handleSubmitNote = async (id, newNote) => {\n        const author = userType === 'doctor' ? 'Doctor' : 'Patient'; // Determine the author based on user type\n        try {\n            const token = localStorage.getItem('token');\n            await axios.post(`http://127.0.0.1:5000/appointments/${id}/add-note`, {\n                note: newNote.text,\n                author: author\n            }, {\n                headers: {\n                    'Authorization': `Bearer ${token}` // Add token to the request headers\n                }\n            });\n            \n            // Update the appointments state with the new note\n            setAppointments((prevAppointments) =>\n                prevAppointments.map((appointment) =>\n                    appointment.id === id\n                        ? { \n                            ...appointment, \n                            notes: [...appointment.notes, { author: author, text: newNote.text }]\n                        }\n                        : appointment\n                )\n            );\n            return true;\n        } catch (error) {\n            console.error('Error submitting note:', error);\n            return false;\n        }\n    };\n\n    const handleBookAppointment = (newAppointment) => {\n        const newId = appointments.length + 1;\n        setAppointments([\n            ...appointments,\n            {\n                id: newId,\n                doctor_name: 'Dr. Jane Smith',\n                patient_name: localStorage.getItem('username'), // Use stored username\n                date: newAppointment.date,\n                status: 'Scheduled',\n                notes: [{ author: 'Patient', text: newAppointment.note }],\n                isDoctor: false,\n            },\n        ]);\n    };\n\n    if (!userType) {\n        return <LoginPage onLogin={handleLogin} />;\n    }\n\n    const filteredAppointments =\n        userType === 'patient'\n            ? appointments.filter((appointment) => appointment.patient_name === localStorage.getItem('username'))\n            : appointments;\n\n    return (\n        <div className=\"App\">\n            <h1>Hospital Management System</h1>\n            <button onClick={handleLogout}>Logout</button>\n\n            {userType === 'doctor' ? (\n                <DoctorDashboard\n                    appointments={filteredAppointments}\n                    onCancel={handleCancelAppointment}\n                    onSubmitNote={handleSubmitNote}\n                />\n            ) : (\n                <PatientDashboard\n                    appointments={filteredAppointments}\n                    onCancel={handleCancelAppointment}\n                    onSubmitNote={handleSubmitNote}\n                    onBookAppointment={handleBookAppointment}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}