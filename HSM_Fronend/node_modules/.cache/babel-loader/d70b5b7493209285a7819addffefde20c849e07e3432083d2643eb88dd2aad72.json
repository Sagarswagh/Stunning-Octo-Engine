{"ast":null,"code":"var _jsxFileName = \"/Users/sagarwagh/Desktop/Final Project/HSM_Fronend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport DoctorDashboard from './components/DoctorDashboard';\nimport PatientDashboard from './components/PatientDashboard';\nimport LoginPage from './components/LoginPage';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [appointments, setAppointments] = useState([]);\n  const [userType, setUserType] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  let timer; // Define timer outside useEffect\n\n  useEffect(() => {\n    const checkAuthStatus = () => {\n      const storedUserType = localStorage.getItem('userType');\n      const storedUsername = localStorage.getItem('username');\n      if (storedUserType && storedUsername) {\n        setIsAuthenticated(true);\n        setUserType(storedUserType);\n      }\n    };\n\n    // Check authentication status and fetch appointments\n    checkAuthStatus();\n    fetchAppointments();\n    const resetTimer = () => {\n      // Clear previous timer and reset\n      if (timer) clearTimeout(timer);\n      // Set a new timer for 3 minutes (180000 ms)\n      timer = setTimeout(logout, 60000);\n    };\n\n    // Event listeners to reset the timer on user activity\n    const events = ['click', 'keydown', 'mousemove'];\n    events.forEach(event => window.addEventListener(event, resetTimer));\n\n    // Cleanup event listeners on component unmount\n    return () => {\n      events.forEach(event => window.removeEventListener(event, resetTimer));\n      clearTimeout(timer);\n    };\n  }, []); // Empty dependency array ensures this runs only once on mount\n\n  const logout = () => {\n    localStorage.removeItem('username');\n    localStorage.removeItem('userType');\n    setIsAuthenticated(false);\n    setUserType(null); // Clear user state\n    window.location.href = '/login'; // Redirect to login page\n  };\n  const fetchAppointments = async () => {\n    try {\n      const response = await fetch('http://127.0.0.1:5000/appointments');\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      setAppointments(data);\n    } catch (error) {\n      console.error('Error fetching appointments:', error);\n    }\n  };\n  const handleLogin = type => {\n    setUserType(type);\n  };\n  const handleLogout = () => {\n    localStorage.removeItem('username');\n    localStorage.removeItem('userType');\n    setUserType(null); // Reset user type\n  };\n  const handleCancelAppointment = async id => {\n    setAppointments(prevAppointments => prevAppointments.map(appointment => appointment.id === id ? {\n      ...appointment,\n      status: 'Cancelled'\n    } : appointment));\n  };\n  const handleSubmitNote = async (id, newNote) => {\n    const author = userType === 'doctor' ? 'Doctor' : 'Patient'; // Determine the author based on user type\n    try {\n      // Send both the note text and the author to the backend\n      await axios.post(`http://127.0.0.1:5000/appointments/${id}/add-note`, {\n        note: newNote.text,\n        author: author // Include the author\n      });\n\n      // Update the appointments state with the new note\n      setAppointments(prevAppointments => prevAppointments.map(appointment => appointment.id === id ? {\n        ...appointment,\n        notes: [...appointment.notes, {\n          author: author,\n          text: newNote.text\n        }] // Update note structure to include author\n      } : appointment));\n      return true;\n    } catch (error) {\n      console.error('Error submitting note:', error);\n      return false;\n    }\n  };\n  const handleBookAppointment = async newAppointment => {\n    try {\n      // Fetch appointments after a new appointment is created\n      await fetchAppointments();\n    } catch (error) {\n      console.error('Error fetching appointments after booking:', error);\n    }\n  };\n\n  // Show the login page if the user has not selected a user type\n  if (!userType) {\n    return /*#__PURE__*/_jsxDEV(LoginPage, {\n      onLogin: handleLogin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 16\n    }, this);\n  }\n\n  // Filter appointments for the logged-in patient\n  const filteredAppointments = userType === 'patient' ? appointments.filter(appointment => appointment.patient_name === localStorage.getItem('username')) : appointments;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Hospital Management System\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logout-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"logout-button\",\n          onClick: handleLogout,\n          children: \"Logout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this), userType === 'doctor' ? /*#__PURE__*/_jsxDEV(DoctorDashboard, {\n      appointments: filteredAppointments,\n      onCancel: handleCancelAppointment,\n      onSubmitNote: handleSubmitNote\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(PatientDashboard, {\n      appointments: filteredAppointments,\n      onCancel: handleCancelAppointment,\n      onSubmitNote: handleSubmitNote,\n      onBookAppointment: handleBookAppointment\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"QrdxMSb2ULUTcr1i8UUSdDmeJkc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","DoctorDashboard","PatientDashboard","LoginPage","axios","jsxDEV","_jsxDEV","App","_s","appointments","setAppointments","userType","setUserType","isAuthenticated","setIsAuthenticated","timer","checkAuthStatus","storedUserType","localStorage","getItem","storedUsername","fetchAppointments","resetTimer","clearTimeout","setTimeout","logout","events","forEach","event","window","addEventListener","removeEventListener","removeItem","location","href","response","fetch","ok","Error","data","json","error","console","handleLogin","type","handleLogout","handleCancelAppointment","id","prevAppointments","map","appointment","status","handleSubmitNote","newNote","author","post","note","text","notes","handleBookAppointment","newAppointment","onLogin","fileName","_jsxFileName","lineNumber","columnNumber","filteredAppointments","filter","patient_name","className","children","onClick","onCancel","onSubmitNote","onBookAppointment","_c","$RefreshReg$"],"sources":["/Users/sagarwagh/Desktop/Final Project/HSM_Fronend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport DoctorDashboard from './components/DoctorDashboard';\nimport PatientDashboard from './components/PatientDashboard';\nimport LoginPage from './components/LoginPage';\nimport axios from 'axios';\n\nconst App = () => {\n    const [appointments, setAppointments] = useState([]);\n    const [userType, setUserType] = useState(null);\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\n    let timer; // Define timer outside useEffect\n\n    useEffect(() => {\n        const checkAuthStatus = () => {\n            const storedUserType = localStorage.getItem('userType');\n            const storedUsername = localStorage.getItem('username');\n            if (storedUserType && storedUsername) {\n                setIsAuthenticated(true);\n                setUserType(storedUserType);\n            }\n        };\n\n        // Check authentication status and fetch appointments\n        checkAuthStatus();\n        fetchAppointments();\n\n        const resetTimer = () => {\n            // Clear previous timer and reset\n            if (timer) clearTimeout(timer);\n            // Set a new timer for 3 minutes (180000 ms)\n            timer = setTimeout(logout, 60000);\n        };\n\n        // Event listeners to reset the timer on user activity\n        const events = ['click', 'keydown', 'mousemove'];\n        events.forEach(event => window.addEventListener(event, resetTimer));\n\n        // Cleanup event listeners on component unmount\n        return () => {\n            events.forEach(event => window.removeEventListener(event, resetTimer));\n            clearTimeout(timer);\n        };\n    }, []); // Empty dependency array ensures this runs only once on mount\n\n    const logout = () => {\n        localStorage.removeItem('username');\n        localStorage.removeItem('userType');\n        setIsAuthenticated(false);\n        setUserType(null); // Clear user state\n        window.location.href = '/login'; // Redirect to login page\n    };\n\n    const fetchAppointments = async () => {\n        try {\n            const response = await fetch('http://127.0.0.1:5000/appointments');\n            if (!response.ok) {\n                throw new Error('Network response was not ok');\n            }\n            const data = await response.json();\n            setAppointments(data);\n        } catch (error) {\n            console.error('Error fetching appointments:', error);\n        }\n    };\n\n    const handleLogin = (type) => {\n        setUserType(type);\n    };\n\n    const handleLogout = () => {\n        localStorage.removeItem('username');\n        localStorage.removeItem('userType');\n        setUserType(null); // Reset user type\n    };\n\n    const handleCancelAppointment = async (id) => {\n        setAppointments((prevAppointments) =>\n            prevAppointments.map((appointment) =>\n                appointment.id === id ? { ...appointment, status: 'Cancelled' } : appointment\n            )\n        );\n    };\n\n    const handleSubmitNote = async (id, newNote) => {\n        const author = userType === 'doctor' ? 'Doctor' : 'Patient'; // Determine the author based on user type\n        try {\n            // Send both the note text and the author to the backend\n            await axios.post(`http://127.0.0.1:5000/appointments/${id}/add-note`, {\n                note: newNote.text,\n                author: author // Include the author\n            });\n\n            // Update the appointments state with the new note\n            setAppointments((prevAppointments) =>\n                prevAppointments.map((appointment) =>\n                    appointment.id === id\n                        ? {\n                            ...appointment,\n                            notes: [...appointment.notes, { author: author, text: newNote.text }] // Update note structure to include author\n                        }\n                        : appointment\n                )\n            );\n            return true;\n        } catch (error) {\n            console.error('Error submitting note:', error);\n            return false;\n        }\n    };\n\n    const handleBookAppointment = async (newAppointment) => {\n        try {\n            // Fetch appointments after a new appointment is created\n            await fetchAppointments();\n        } catch (error) {\n            console.error('Error fetching appointments after booking:', error);\n        }\n    };\n\n    // Show the login page if the user has not selected a user type\n    if (!userType) {\n        return <LoginPage onLogin={handleLogin} />;\n    }\n\n    // Filter appointments for the logged-in patient\n    const filteredAppointments =\n        userType === 'patient'\n            ? appointments.filter((appointment) => appointment.patient_name === localStorage.getItem('username'))\n            : appointments;\n\n    return (\n        <div className=\"App\">\n            <div className=\"header\">\n                <h1>Hospital Management System</h1>\n                <div className=\"logout-container\">\n                    <button className=\"logout-button\" onClick={handleLogout}>Logout</button>\n                </div>\n            </div>\n\n            {userType === 'doctor' ? (\n                <DoctorDashboard\n                    appointments={filteredAppointments}\n                    onCancel={handleCancelAppointment}\n                    onSubmitNote={handleSubmitNote}\n                />\n            ) : (\n                <PatientDashboard\n                    appointments={filteredAppointments}\n                    onCancel={handleCancelAppointment}\n                    onSubmitNote={handleSubmitNote}\n                    onBookAppointment={handleBookAppointment}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}