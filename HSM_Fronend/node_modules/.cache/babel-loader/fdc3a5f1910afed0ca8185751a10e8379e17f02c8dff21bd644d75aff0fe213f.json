{"ast":null,"code":"var _jsxFileName = \"/Users/sagarwagh/Desktop/Final Project/hospital-management-system/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport DoctorDashboard from './components/DoctorDashboard';\nimport PatientDashboard from './components/PatientDashboard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [appointments, setAppointments] = useState([]);\n  const fetchAppointments = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/appointments');\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      setAppointments(data);\n    } catch (error) {\n      console.error('Error fetching appointments:', error);\n    }\n  };\n  const handleCancelAppointment = async id => {\n    await updateAppointment(id, {\n      status: 'Cancelled'\n    });\n  };\n  const handleSubmitNote = async (id, newNote) => {\n    await updateAppointment(id, {\n      note: newNote\n    });\n  };\n  const handleBookAppointment = async newAppointment => {\n    try {\n      const response = await fetch('http://localhost:5000/appointments', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newAppointment)\n      });\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      fetchAppointments(); // Refresh appointments after booking\n    } catch (error) {\n      console.error('Error booking appointment:', error);\n    }\n  };\n  const updateAppointment = async (id, data) => {\n    try {\n      const response = await fetch(`http://localhost:5000/appointments/${id}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      });\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      fetchAppointments(); // Refresh appointments after update\n    } catch (error) {\n      console.error('Error updating appointment:', error);\n    }\n  };\n  useEffect(() => {\n    fetchAppointments();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Hospital Management System\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DoctorDashboard, {\n      appointments: appointments.filter(appointment => appointment.doctor_name),\n      onCancel: handleCancelAppointment,\n      onSubmitNote: handleSubmitNote\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PatientDashboard, {\n      appointments: appointments.filter(appointment => appointment.patient_name),\n      onCancel: handleCancelAppointment,\n      onSubmitNote: handleSubmitNote,\n      onBookAppointment: handleBookAppointment\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"MfWojYlbX9MgZ4Hbt1nSvX/pcQY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","DoctorDashboard","PatientDashboard","jsxDEV","_jsxDEV","App","_s","appointments","setAppointments","fetchAppointments","response","fetch","ok","Error","data","json","error","console","handleCancelAppointment","id","updateAppointment","status","handleSubmitNote","newNote","note","handleBookAppointment","newAppointment","method","headers","body","JSON","stringify","className","children","fileName","_jsxFileName","lineNumber","columnNumber","filter","appointment","doctor_name","onCancel","onSubmitNote","patient_name","onBookAppointment","_c","$RefreshReg$"],"sources":["/Users/sagarwagh/Desktop/Final Project/hospital-management-system/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport DoctorDashboard from './components/DoctorDashboard';\nimport PatientDashboard from './components/PatientDashboard';\n\nconst App = () => {\n    const [appointments, setAppointments] = useState([]);\n\n    const fetchAppointments = async () => {\n        try {\n            const response = await fetch('http://localhost:5000/appointments');\n            if (!response.ok) {\n                throw new Error('Network response was not ok');\n            }\n            const data = await response.json();\n            setAppointments(data);\n        } catch (error) {\n            console.error('Error fetching appointments:', error);\n        }\n    };\n\n    const handleCancelAppointment = async (id) => {\n        await updateAppointment(id, { status: 'Cancelled' });\n    };\n\n    const handleSubmitNote = async (id, newNote) => {\n        await updateAppointment(id, { note: newNote });\n    };\n\n    const handleBookAppointment = async (newAppointment) => {\n        try {\n            const response = await fetch('http://localhost:5000/appointments', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(newAppointment),\n            });\n\n            if (!response.ok) {\n                throw new Error('Network response was not ok');\n            }\n            fetchAppointments(); // Refresh appointments after booking\n        } catch (error) {\n            console.error('Error booking appointment:', error);\n        }\n    };\n\n    const updateAppointment = async (id, data) => {\n        try {\n            const response = await fetch(`http://localhost:5000/appointments/${id}`, {\n                method: 'PATCH',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(data),\n            });\n\n            if (!response.ok) {\n                throw new Error('Network response was not ok');\n            }\n            fetchAppointments(); // Refresh appointments after update\n        } catch (error) {\n            console.error('Error updating appointment:', error);\n        }\n    };\n\n    useEffect(() => {\n        fetchAppointments();\n    }, []);\n\n    return (\n        <div className=\"App\">\n            <h1>Hospital Management System</h1>\n            <DoctorDashboard\n                appointments={appointments.filter((appointment) => appointment.doctor_name)}\n                onCancel={handleCancelAppointment}\n                onSubmitNote={handleSubmitNote}\n            />\n            <PatientDashboard\n                appointments={appointments.filter((appointment) => appointment.patient_name)}\n                onCancel={handleCancelAppointment}\n                onSubmitNote={handleSubmitNote}\n                onBookAppointment={handleBookAppointment}\n            />\n        </div>\n    );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}