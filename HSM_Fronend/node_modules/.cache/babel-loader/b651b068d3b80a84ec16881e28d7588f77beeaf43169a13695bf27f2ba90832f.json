{"ast":null,"code":"var _jsxFileName = \"/Users/sagarwagh/Desktop/Final Project/hospital-management-system/src/components/PatientDashboard.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PatientDashboard = () => {\n  _s();\n  const [appointments, setAppointments] = useState([]);\n\n  // Fetch appointments from backend (this could be done in useEffect)\n  useEffect(() => {\n    const fetchAppointments = async () => {\n      const response = await fetch('/appointments'); // Adjust endpoint as necessary\n      const data = await response.json();\n      setAppointments(data);\n    };\n    fetchAppointments();\n  }, []);\n\n  // Function to handle adding a note\n  const handleAddNote = async (appointmentId, newNote) => {\n    try {\n      const response = await fetch(`/appointments/${appointmentId}/add-note`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          note: newNote\n        })\n      });\n      if (response.ok) {\n        return true; // Successfully updated the backend\n      } else {\n        console.error('Failed to add note');\n        return false;\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      return false;\n    }\n  };\n\n  // Function to handle canceling an appointment\n  const handleCancelAppointment = async appointmentId => {\n    try {\n      const response = await fetch(`/appointments/${appointmentId}/cancel`, {\n        method: 'POST'\n      });\n      if (response.ok) {\n        // Optionally update the UI after successful cancellation\n        setAppointments(appointments.map(app => app.id === appointmentId ? {\n          ...app,\n          status: 'Cancelled'\n        } : app));\n        return true;\n      } else {\n        console.error('Failed to cancel appointment');\n        return false;\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      return false;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"patient-dashboard\",\n    children: appointments.map(appointment => /*#__PURE__*/_jsxDEV(AppointmentCard, {\n      appointment: appointment,\n      onCancel: handleCancelAppointment,\n      onSubmitNote: handleAddNote\n    }, appointment.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n};\n_s(PatientDashboard, \"MfWojYlbX9MgZ4Hbt1nSvX/pcQY=\");\n_c = PatientDashboard;\nexport default PatientDashboard;\nvar _c;\n$RefreshReg$(_c, \"PatientDashboard\");","map":{"version":3,"names":["PatientDashboard","_s","appointments","setAppointments","useState","useEffect","fetchAppointments","response","fetch","data","json","handleAddNote","appointmentId","newNote","method","headers","body","JSON","stringify","note","ok","console","error","handleCancelAppointment","map","app","id","status","_jsxDEV","className","children","appointment","AppointmentCard","onCancel","onSubmitNote","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sagarwagh/Desktop/Final Project/hospital-management-system/src/components/PatientDashboard.js"],"sourcesContent":["const PatientDashboard = () => {\n    const [appointments, setAppointments] = useState([]);\n\n    // Fetch appointments from backend (this could be done in useEffect)\n    useEffect(() => {\n        const fetchAppointments = async () => {\n            const response = await fetch('/appointments'); // Adjust endpoint as necessary\n            const data = await response.json();\n            setAppointments(data);\n        };\n\n        fetchAppointments();\n    }, []);\n\n    // Function to handle adding a note\n    const handleAddNote = async (appointmentId, newNote) => {\n        try {\n            const response = await fetch(`/appointments/${appointmentId}/add-note`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ note: newNote }),\n            });\n\n            if (response.ok) {\n                return true; // Successfully updated the backend\n            } else {\n                console.error('Failed to add note');\n                return false;\n            }\n        } catch (error) {\n            console.error('Error:', error);\n            return false;\n        }\n    };\n\n    // Function to handle canceling an appointment\n    const handleCancelAppointment = async (appointmentId) => {\n        try {\n            const response = await fetch(`/appointments/${appointmentId}/cancel`, {\n                method: 'POST',\n            });\n\n            if (response.ok) {\n                // Optionally update the UI after successful cancellation\n                setAppointments(appointments.map(app => app.id === appointmentId ? { ...app, status: 'Cancelled' } : app));\n                return true;\n            } else {\n                console.error('Failed to cancel appointment');\n                return false;\n            }\n        } catch (error) {\n            console.error('Error:', error);\n            return false;\n        }\n    };\n\n    return (\n        <div className=\"patient-dashboard\">\n            {appointments.map(appointment => (\n                <AppointmentCard\n                    key={appointment.id}\n                    appointment={appointment}\n                    onCancel={handleCancelAppointment}\n                    onSubmitNote={handleAddNote}\n                />\n            ))}\n        </div>\n    );\n};\n\nexport default PatientDashboard;\n"],"mappings":";;;AAAA,MAAMA,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGC,QAAQ,CAAC,EAAE,CAAC;;EAEpD;EACAC,SAAS,CAAC,MAAM;IACZ,MAAMC,iBAAiB,GAAG,MAAAA,CAAA,KAAY;MAClC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC;MAC/C,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClCP,eAAe,CAACM,IAAI,CAAC;IACzB,CAAC;IAEDH,iBAAiB,CAAC,CAAC;EACvB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMK,aAAa,GAAG,MAAAA,CAAOC,aAAa,EAAEC,OAAO,KAAK;IACpD,IAAI;MACA,MAAMN,QAAQ,GAAG,MAAMC,KAAK,CAAC,iBAAiBI,aAAa,WAAW,EAAE;QACpEE,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,IAAI,EAAEN;QAAQ,CAAC;MAC1C,CAAC,CAAC;MAEF,IAAIN,QAAQ,CAACa,EAAE,EAAE;QACb,OAAO,IAAI,CAAC,CAAC;MACjB,CAAC,MAAM;QACHC,OAAO,CAACC,KAAK,CAAC,oBAAoB,CAAC;QACnC,OAAO,KAAK;MAChB;IACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;MACZD,OAAO,CAACC,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAC9B,OAAO,KAAK;IAChB;EACJ,CAAC;;EAED;EACA,MAAMC,uBAAuB,GAAG,MAAOX,aAAa,IAAK;IACrD,IAAI;MACA,MAAML,QAAQ,GAAG,MAAMC,KAAK,CAAC,iBAAiBI,aAAa,SAAS,EAAE;QAClEE,MAAM,EAAE;MACZ,CAAC,CAAC;MAEF,IAAIP,QAAQ,CAACa,EAAE,EAAE;QACb;QACAjB,eAAe,CAACD,YAAY,CAACsB,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACC,EAAE,KAAKd,aAAa,GAAG;UAAE,GAAGa,GAAG;UAAEE,MAAM,EAAE;QAAY,CAAC,GAAGF,GAAG,CAAC,CAAC;QAC1G,OAAO,IAAI;MACf,CAAC,MAAM;QACHJ,OAAO,CAACC,KAAK,CAAC,8BAA8B,CAAC;QAC7C,OAAO,KAAK;MAChB;IACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;MACZD,OAAO,CAACC,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAC9B,OAAO,KAAK;IAChB;EACJ,CAAC;EAED,oBACIM,OAAA;IAAKC,SAAS,EAAC,mBAAmB;IAAAC,QAAA,EAC7B5B,YAAY,CAACsB,GAAG,CAACO,WAAW,iBACzBH,OAAA,CAACI,eAAe;MAEZD,WAAW,EAAEA,WAAY;MACzBE,QAAQ,EAAEV,uBAAwB;MAClCW,YAAY,EAAEvB;IAAc,GAHvBoB,WAAW,CAACL,EAAE;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAItB,CACJ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAACrC,EAAA,CAtEID,gBAAgB;AAAAuC,EAAA,GAAhBvC,gBAAgB;AAwEtB,eAAeA,gBAAgB;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}