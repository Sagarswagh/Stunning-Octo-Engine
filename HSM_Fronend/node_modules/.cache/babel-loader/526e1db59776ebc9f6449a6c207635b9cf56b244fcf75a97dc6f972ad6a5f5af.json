{"ast":null,"code":"var _jsxFileName = \"/Users/sagarwagh/Desktop/Final Project/hospital-management-system/src/components/PatientDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport AppointmentCard from './AppointmentCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PatientDashboard = ({\n  appointments,\n  onCancel,\n  onSubmitNote,\n  onBookAppointment\n}) => {\n  _s();\n  const [newAppointment, setNewAppointment] = useState({\n    date: '',\n    note: ''\n  });\n\n  // Handle input changes for new appointment form\n  const handleInputChange = e => {\n    setNewAppointment({\n      ...newAppointment,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  // Handle booking a new appointment\n  const handleBookAppointmentClick = async () => {\n    try {\n      const appointmentData = {\n        doctor_name: \"Dr. Jane Smith\",\n        // Hardcoded for now\n        patient_name: \"Patient Name\",\n        // Replace with the actual patient name dynamically\n        date: newAppointment.date,\n        status: 'Scheduled',\n        notes: [{\n          text: newAppointment.note,\n          author: 'Patient'\n        }] // Send the note as an object\n      };\n      const response = await fetch('http://127.0.0.1:5000/appointments', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(appointmentData)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to create appointment');\n      }\n      const createdAppointment = await response.json();\n\n      // Call the onBookAppointment function passed as a prop to update the appointments in App.js\n      onBookAppointment(createdAppointment);\n\n      // Clear the new appointment form\n      setNewAppointment({\n        date: '',\n        note: ''\n      });\n    } catch (error) {\n      console.error('Error booking appointment:', error);\n    }\n  };\n\n  // Handle note submission\n  const handleAddNote = async (appointmentId, newNote) => {\n    console.log(appointmentId, newNote);\n    await onSubmitNote(appointmentId, newNote);\n  };\n\n  // Handle appointment cancellation\n  const handleCancelAppointment = async appointmentId => {\n    await onCancel(appointmentId);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Patient's Appointments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), appointments && appointments.length > 0 ? appointments.map(appointment => /*#__PURE__*/_jsxDEV(AppointmentCard, {\n      appointment: appointment,\n      onCancel: handleCancelAppointment,\n      onSubmitNote: handleAddNote\n    }, appointment.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 21\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No appointments available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"appointment-booking\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Book a new appointment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        name: \"date\",\n        value: newAppointment.date,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"note\",\n        placeholder: \"Add a note\",\n        value: newAppointment.note,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleBookAppointmentClick,\n        children: \"Book Appointment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n};\n_s(PatientDashboard, \"3cdE6LwCln2+ibYcqzNnx6dZWCg=\");\n_c = PatientDashboard;\nexport default PatientDashboard;\nvar _c;\n$RefreshReg$(_c, \"PatientDashboard\");","map":{"version":3,"names":["React","useState","AppointmentCard","jsxDEV","_jsxDEV","PatientDashboard","appointments","onCancel","onSubmitNote","onBookAppointment","_s","newAppointment","setNewAppointment","date","note","handleInputChange","e","target","name","value","handleBookAppointmentClick","appointmentData","doctor_name","patient_name","status","notes","text","author","response","fetch","method","headers","body","JSON","stringify","ok","Error","createdAppointment","json","error","console","handleAddNote","appointmentId","newNote","log","handleCancelAppointment","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","appointment","id","type","onChange","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/sagarwagh/Desktop/Final Project/hospital-management-system/src/components/PatientDashboard.js"],"sourcesContent":["import React, { useState } from 'react';\nimport AppointmentCard from './AppointmentCard';\n\nconst PatientDashboard = ({ appointments, onCancel, onSubmitNote, onBookAppointment }) => {\n    const [newAppointment, setNewAppointment] = useState({ date: '', note: '' });\n\n    // Handle input changes for new appointment form\n    const handleInputChange = (e) => {\n        setNewAppointment({ ...newAppointment, [e.target.name]: e.target.value });\n    };\n\n    // Handle booking a new appointment\n    const handleBookAppointmentClick = async () => {\n        try {\n            const appointmentData = {\n                doctor_name: \"Dr. Jane Smith\",  // Hardcoded for now\n                patient_name: \"Patient Name\",  // Replace with the actual patient name dynamically\n                date: newAppointment.date,\n                status: 'Scheduled',\n                notes: [{ text: newAppointment.note, author: 'Patient' }],  // Send the note as an object\n            };\n\n            const response = await fetch('http://127.0.0.1:5000/appointments', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(appointmentData),\n            });\n\n            if (!response.ok) {\n                throw new Error('Failed to create appointment');\n            }\n\n            const createdAppointment = await response.json();\n\n            // Call the onBookAppointment function passed as a prop to update the appointments in App.js\n            onBookAppointment(createdAppointment);\n\n            // Clear the new appointment form\n            setNewAppointment({ date: '', note: '' });\n\n        } catch (error) {\n            console.error('Error booking appointment:', error);\n        }\n    };\n\n    // Handle note submission\n    const handleAddNote = async (appointmentId, newNote) => {\n        console.log(appointmentId, newNote);\n        await onSubmitNote(appointmentId, newNote);\n    };\n\n    // Handle appointment cancellation\n    const handleCancelAppointment = async (appointmentId) => {\n        await onCancel(appointmentId);\n    };\n\n    return (\n        <div className=\"dashboard\">\n            <h2>Patient's Appointments</h2>\n\n            {/* Check if appointments is an array and has data */}\n            {appointments && appointments.length > 0 ? (\n                appointments.map((appointment) => (\n                    <AppointmentCard\n                        key={appointment.id}\n                        appointment={appointment}\n                        onCancel={handleCancelAppointment}\n                        onSubmitNote={handleAddNote}\n                    />\n                ))\n            ) : (\n                <p>No appointments available.</p>\n            )}\n\n            <div className=\"appointment-booking\">\n                <h3>Book a new appointment</h3>\n                <input\n                    type=\"date\"\n                    name=\"date\"\n                    value={newAppointment.date}\n                    onChange={handleInputChange}\n                />\n                <input\n                    type=\"text\"\n                    name=\"note\"\n                    placeholder=\"Add a note\"\n                    value={newAppointment.note}\n                    onChange={handleInputChange}\n                />\n                <button onClick={handleBookAppointmentClick}>Book Appointment</button>\n            </div>\n        </div>\n    );\n};\n\nexport default PatientDashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}