{"ast":null,"code":"var _jsxFileName = \"/Users/sagarwagh/Desktop/Final Project/hospital-management-system/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport DoctorDashboard from './components/DoctorDashboard';\nimport PatientDashboard from './components/PatientDashboard';\nimport LoginPage from './components/LoginPage';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [appointments, setAppointments] = useState([]);\n  const [userType, setUserType] = useState(null);\n  useEffect(() => {\n    // Check if user is logged in\n    const storedUserType = localStorage.getItem('userType');\n    if (storedUserType) {\n      setUserType(storedUserType);\n    }\n\n    // Fetch appointments on initial load\n    fetchAppointments();\n  }, []);\n  const fetchAppointments = async () => {\n    try {\n      const response = await fetch('http://127.0.0.1:5000/appointments');\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      setAppointments(data);\n    } catch (error) {\n      console.error('Error fetching appointments:', error);\n    }\n  };\n  const handleLogin = type => {\n    setUserType(type);\n  };\n  const handleLogout = () => {\n    localStorage.removeItem('username');\n    localStorage.removeItem('userType');\n    setUserType(null); // Reset user type\n  };\n  const handleCancelAppointment = async id => {\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/appointments/${id}/cancel`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to cancel appointment');\n      }\n      const data = await response.json();\n      if (data.success) {\n        // Re-fetch appointments after cancellation\n        fetchAppointments();\n      } else {\n        console.error('Error cancelling appointment:', data.message);\n      }\n    } catch (error) {\n      console.error('Error cancelling appointment:', error);\n    }\n  };\n  const handleSubmitNote = async (id, newNote) => {\n    const author = userType === 'doctor' ? 'Doctor' : 'Patient'; // Determine the author based on user type\n    try {\n      // Send both the note text and the author to the backend\n      await axios.post(`http://127.0.0.1:5000/appointments/${id}/add-note`, {\n        note: newNote.text,\n        author: author // Include the author\n      });\n\n      // Re-fetch appointments to update notes\n      fetchAppointments();\n      return true;\n    } catch (error) {\n      console.error('Error submitting note:', error);\n      return false;\n    }\n  };\n  const handleBookAppointment = async newAppointment => {\n    const patientName = localStorage.getItem('username'); // Get the logged-in patient's name\n    const appointmentData = {\n      doctor_name: \"Dr. Jane Smith\",\n      // This should ideally come from user input or selection\n      patient_name: patientName,\n      date: newAppointment.date,\n      status: 'Scheduled',\n      notes: [{\n        author: 'Patient',\n        text: newAppointment.note\n      }]\n    };\n    try {\n      const response = await fetch('http://127.0.0.1:5000/appointments', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(appointmentData)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to create appointment');\n      }\n      await response.json(); // Process the created appointment if needed\n\n      // Re-fetch appointments to get the updated list\n      fetchAppointments();\n    } catch (error) {\n      console.error('Error booking appointment:', error);\n    }\n  };\n\n  // Show the login page if the user has not selected a user type\n  if (!userType) {\n    return /*#__PURE__*/_jsxDEV(LoginPage, {\n      onLogin: handleLogin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 16\n    }, this);\n  }\n\n  // Filter appointments for the logged-in patient\n  const filteredAppointments = userType === 'patient' ? appointments.filter(appointment => appointment.patient_name === localStorage.getItem('username')) : appointments;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Hospital Management System\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLogout,\n      children: \"Logout\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this), userType === 'doctor' ? /*#__PURE__*/_jsxDEV(DoctorDashboard, {\n      appointments: filteredAppointments // All appointments passed to DoctorDashboard\n      ,\n      onCancel: handleCancelAppointment,\n      onSubmitNote: handleSubmitNote\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(PatientDashboard, {\n      appointments: filteredAppointments // Filtered appointments for the patient\n      ,\n      onCancel: handleCancelAppointment,\n      onSubmitNote: handleSubmitNote,\n      onBookAppointment: handleBookAppointment\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"zQcYWi9pEHSP7I9Oj7ANVEoB9S4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","DoctorDashboard","PatientDashboard","LoginPage","axios","jsxDEV","_jsxDEV","App","_s","appointments","setAppointments","userType","setUserType","storedUserType","localStorage","getItem","fetchAppointments","response","fetch","ok","Error","data","json","error","console","handleLogin","type","handleLogout","removeItem","handleCancelAppointment","id","method","headers","success","message","handleSubmitNote","newNote","author","post","note","text","handleBookAppointment","newAppointment","patientName","appointmentData","doctor_name","patient_name","date","status","notes","body","JSON","stringify","onLogin","fileName","_jsxFileName","lineNumber","columnNumber","filteredAppointments","filter","appointment","className","children","onClick","onCancel","onSubmitNote","onBookAppointment","_c","$RefreshReg$"],"sources":["/Users/sagarwagh/Desktop/Final Project/hospital-management-system/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport DoctorDashboard from './components/DoctorDashboard';\nimport PatientDashboard from './components/PatientDashboard';\nimport LoginPage from './components/LoginPage';\nimport axios from 'axios';\n\nconst App = () => {\n    const [appointments, setAppointments] = useState([]);\n    const [userType, setUserType] = useState(null);\n\n    useEffect(() => {\n        // Check if user is logged in\n        const storedUserType = localStorage.getItem('userType');\n        if (storedUserType) {\n            setUserType(storedUserType);\n        }\n\n        // Fetch appointments on initial load\n        fetchAppointments();\n    }, []);\n\n    const fetchAppointments = async () => {\n        try {\n            const response = await fetch('http://127.0.0.1:5000/appointments');\n            if (!response.ok) {\n                throw new Error('Network response was not ok');\n            }\n            const data = await response.json();\n            setAppointments(data);\n        } catch (error) {\n            console.error('Error fetching appointments:', error);\n        }\n    };\n\n    const handleLogin = (type) => {\n        setUserType(type);\n    };\n\n    const handleLogout = () => {\n        localStorage.removeItem('username');\n        localStorage.removeItem('userType');\n        setUserType(null); // Reset user type\n    };\n\n    const handleCancelAppointment = async (id) => {\n        try {\n            const response = await fetch(`http://127.0.0.1:5000/appointments/${id}/cancel`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            });\n\n            if (!response.ok) {\n                throw new Error('Failed to cancel appointment');\n            }\n\n            const data = await response.json();\n\n            if (data.success) {\n                // Re-fetch appointments after cancellation\n                fetchAppointments();\n            } else {\n                console.error('Error cancelling appointment:', data.message);\n            }\n        } catch (error) {\n            console.error('Error cancelling appointment:', error);\n        }\n    };\n\n    const handleSubmitNote = async (id, newNote) => {\n        const author = userType === 'doctor' ? 'Doctor' : 'Patient'; // Determine the author based on user type\n        try {\n            // Send both the note text and the author to the backend\n            await axios.post(`http://127.0.0.1:5000/appointments/${id}/add-note`, {\n                note: newNote.text,\n                author: author // Include the author\n            });\n            \n            // Re-fetch appointments to update notes\n            fetchAppointments();\n            return true;\n        } catch (error) {\n            console.error('Error submitting note:', error);\n            return false;\n        }\n    };\n    \n    const handleBookAppointment = async (newAppointment) => {\n        const patientName = localStorage.getItem('username'); // Get the logged-in patient's name\n        const appointmentData = {\n            doctor_name: \"Dr. Jane Smith\", // This should ideally come from user input or selection\n            patient_name: patientName,\n            date: newAppointment.date,\n            status: 'Scheduled',\n            notes: [{ author: 'Patient', text: newAppointment.note }],\n        };\n\n        try {\n            const response = await fetch('http://127.0.0.1:5000/appointments', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(appointmentData),\n            });\n\n            if (!response.ok) {\n                throw new Error('Failed to create appointment');\n            }\n\n            await response.json(); // Process the created appointment if needed\n\n            // Re-fetch appointments to get the updated list\n            fetchAppointments();\n        } catch (error) {\n            console.error('Error booking appointment:', error);\n        }\n    };\n\n    // Show the login page if the user has not selected a user type\n    if (!userType) {\n        return <LoginPage onLogin={handleLogin} />;\n    }\n\n    // Filter appointments for the logged-in patient\n    const filteredAppointments =\n        userType === 'patient'\n            ? appointments.filter((appointment) => appointment.patient_name === localStorage.getItem('username'))\n            : appointments;\n\n    return (\n        <div className=\"App\">\n            <h1>Hospital Management System</h1>\n            <button onClick={handleLogout}>Logout</button>\n\n            {userType === 'doctor' ? (\n                <DoctorDashboard\n                    appointments={filteredAppointments} // All appointments passed to DoctorDashboard\n                    onCancel={handleCancelAppointment}\n                    onSubmitNote={handleSubmitNote}\n                />\n            ) : (\n                <PatientDashboard\n                    appointments={filteredAppointments} // Filtered appointments for the patient\n                    onCancel={handleCancelAppointment}\n                    onSubmitNote={handleSubmitNote}\n                    onBookAppointment={handleBookAppointment}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}